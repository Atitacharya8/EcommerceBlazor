@page "/product"
@inject IProductRepository _productRepository
@inject NavigationManager _navigationManager
@inject IJSRuntime _jsRuntime

<_DeleteConfirmation IsParentComponentProcessing="IsLoading" ConfirmationChanged="ConfirmDelete_Click"></_DeleteConfirmation>

<div class="row mt-4">
    <div class="col-6 py-2">
        <h4 class="card-title text-primary">Product List</h4>
    </div>
    <div class="col-4 offset-2">
        <a href="category/create" class="btn btn-primary form-control">
            Add New Product
        </a>
    </div>
    <div class="col-12">
        @if (Products.Any())
        {
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Shop Favorites</th>
                        <th>Customer Favorites</th>
                        <th>Category</th>
                    </tr>
                </thead>

                <tbody>
                    @foreach (var prod in Products)
                    {
                        <tr>
                            <td>
                                @prod.Name
                            </td>
                            <th>
                                <input type="checkbox" disabled checked="@prod.ShopFavorites">
                            </th>
                            <th>
                                <input type="checkbox" disabled checked="@prod.CustomerFavorites">
                            </th>
                            <th>@prod.Category.Name</th>
                            <td>
                                <NavLink href="@($"product/edit/{prod.Id}")" class="btn btn-primary">Edit</NavLink>
                               <button class="btn btn-danger" @onclick="()=>HandleDelete(prod.Id)">Delete</button> @* If your method has parameter we should use arrow function*@
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            if (IsLoading)
            {
                //loading git
                <div class="text-center">
                    <img src="/images/loading.gif" />
                </div>
            }
            else
            {
                //no records
                <p>No Records Found.</p>
            }
        }
    </div>
</div>

@code {
    private IEnumerable<ProductDTO> Products { get; set; } = new List<ProductDTO>();

    private bool IsLoading { get; set; }

    private int DeleteProductId { get; set; } = 0;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender){
            //we use loadcategories when it is first render and not the subsequent render
           await LoadProducts();
        }
    }

    private async Task LoadProducts() 
    {
        IsLoading = true;
        StateHasChanged();
        Products = await _productRepository.GetAll();
        IsLoading = false;
        StateHasChanged();

    }

    private void HandleDelete(int id)
    {
        DeleteProductId = id;
        _jsRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal"); //"ShowDeleteConfirmationModal" is not returning anything so we will use invokevoidasync method
    }

    public async Task ConfirmDelete_Click(bool isConfirmed)
    {
        IsLoading = true;
        if (isConfirmed && DeleteProductId != 0)
        {
           
            //delete
            await _productRepository.Delete(DeleteProductId);
            await LoadProducts();
            await _jsRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
        }
        IsLoading = false;
    }
}
